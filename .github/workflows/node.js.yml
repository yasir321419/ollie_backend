name: Node.js CI

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    # Expose secrets as env so shell can read them safely
    env:
      DATABASE_URL: "${{ secrets.DATABASE_URL }}"          # may be empty; we fallback below
      LIVE_DATABASE_URL: "${{ secrets.LIVE_DATABASE_URL }}"# preferred in prod
      PORT: "${{ secrets.PORT }}"
      API_PREFIX: "${{ secrets.API_PREFIX }}"
      SECRET_KEY: "${{ secrets.SECRET_KEY }}"
      MAIL_SERVICE: "${{ secrets.MAIL_SERVICE }}"
      MAIL_HOST: "${{ secrets.MAIL_HOST }}"
      MAIL_USERNAME: "${{ secrets.MAIL_USERNAME }}"
      MAIL_PASSWORD: "${{ secrets.MAIL_PASSWORD }}"
      MAIL_ENCRYPTION: "${{ secrets.MAIL_ENCRYPTION }}"
      MAIL_PORT: "${{ secrets.MAIL_PORT }}"
      MAIL_FROM_NAME: "${{ secrets.MAIL_FROM_NAME }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env from secrets (with validation)
        shell: bash
        run: |
          set -euo pipefail

          # Prefer DATABASE_URL; fallback to LIVE_DATABASE_URL; both may be empty
          DB_URL_VALUE="${DATABASE_URL:-${LIVE_DATABASE_URL:-}}"
          if [ -z "${DB_URL_VALUE}" ]; then
            echo "ERROR: DATABASE_URL resolved to empty (neither DATABASE_URL nor LIVE_DATABASE_URL provided)."
            exit 1
          fi

          # Write .env using printf (avoids heredoc quirks)
          rm -f .env
          printf '%s\n' "DATABASE_URL=${DB_URL_VALUE}"            >> .env
          printf '%s\n' "LIVE_DATABASE_URL=${LIVE_DATABASE_URL}"  >> .env
          printf '%s\n' "NODE_ENV=production"                     >> .env
          printf '%s\n' "PORT=${PORT}"                            >> .env
          printf '%s\n' "API_PREFIX=${API_PREFIX}"                >> .env
          printf '%s\n' "SECRET_KEY=${SECRET_KEY}"                >> .env
          printf '%s\n' "MAIL_SERVICE=${MAIL_SERVICE}"            >> .env
          printf '%s\n' "MAIL_HOST=${MAIL_HOST}"                  >> .env
          printf '%s\n' "MAIL_USERNAME=${MAIL_USERNAME}"          >> .env
          printf '%s\n' "MAIL_PASSWORD=${MAIL_PASSWORD}"          >> .env
          printf '%s\n' "MAIL_ENCRYPTION=${MAIL_ENCRYPTION}"      >> .env
          printf '%s\n' "MAIL_PORT=${MAIL_PORT}"                  >> .env
          printf '%s\n' "MAIL_FROM_NAME=${MAIL_FROM_NAME}"        >> .env

          # Verify DATABASE_URL exists & non-empty (don't print its value)
          if ! grep -q '^DATABASE_URL=' .env; then
            echo "ERROR: DATABASE_URL not written to .env"; exit 1
          fi
          LEN="$(awk -F= '/^DATABASE_URL=/{print length($2)}' .env)"
          if [ "${LEN}" -eq 0 ]; then
            echo "ERROR: DATABASE_URL in .env is empty"; exit 1
          fi

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Prisma generate & migrate
        shell: bash
        run: |
          set -euo pipefail
          # If a blank env var slipped in from job env, force Prisma to read .env
          unset DATABASE_URL || true
          npx prisma generate
          # Deploy migrations if present; otherwise push schema
          npx prisma migrate deploy || npx prisma db push

      - name: Ensure PM2 installed
        shell: bash
        run: |
          command -v pm2 >/dev/null 2>&1 || sudo npm i -g pm2

      - name: Start/Reload app with PM2
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="ollie-backend"

          # Start first time or reload; --update-env picks up new .env
          if pm2 describe "${APP_NAME}" >/dev/null 2>&1; then
            pm2 reload "${APP_NAME}" --update-env
          else
            # Change index.js if your entry file is different
            pm2 start index.js --name "${APP_NAME}"
          fi

          # Remove any old crashed 'index' process lingering in PM2
          pm2 delete index || true
          pm2 save

      - name: Health check (fast)
        shell: bash
        run: |
          set -e
          URL="http://127.0.0.1:${PORT:-3000}/health"
          for i in {1..30}; do
            if curl -fsS "$URL" >/dev/null; then
              echo "Health check passed"; exit 0
            fi
            sleep 2
          done
          echo "Health check failed"
          # print a small snippet of logs for debugging and fail
          pm2 logs ollie-backend --lines 120 --nostream || true
          exit 1

      - name: PM2 status & recent logs (non-blocking)
        shell: bash
        run: |
          pm2 status
          # Show last lines without streaming so the step exits quickly
          timeout 8s pm2 logs ollie-backend --lines 80 --nostream || true
