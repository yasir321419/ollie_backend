name: Node.js CI

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: self-hosted

    env:
      DATABASE_URL: "${{ secrets.DATABASE_URL }}"
      LIVE_DATABASE_URL: "${{ secrets.LIVE_DATABASE_URL }}"
      PORT: "${{ secrets.PORT }}"
      API_PREFIX: "${{ secrets.API_PREFIX }}"
      SECRET_KEY: "${{ secrets.SECRET_KEY }}"
      MAIL_SERVICE: "${{ secrets.MAIL_SERVICE }}"
      MAIL_HOST: "${{ secrets.MAIL_HOST }}"
      MAIL_USERNAME: "${{ secrets.MAIL_USERNAME }}"
      MAIL_PASSWORD: "${{ secrets.MAIL_PASSWORD }}"
      MAIL_ENCRYPTION: "${{ secrets.MAIL_ENCRYPTION }}"
      MAIL_PORT: "${{ secrets.MAIL_PORT }}"
      MAIL_FROM_NAME: "${{ secrets.MAIL_FROM_NAME }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env from secrets (no heredoc)
        shell: bash
        run: |
          set -euo pipefail

          DB_URL_VALUE="${DATABASE_URL:-${LIVE_DATABASE_URL:-}}"
          if [ -z "${DB_URL_VALUE}" ]; then
            echo "ERROR: DATABASE_URL resolved to empty (neither DATABASE_URL nor LIVE_DATABASE_URL provided)."
            exit 1
          fi

          rm -f .env
          printf '%s\n' "DATABASE_URL=${DB_URL_VALUE}"            >> .env
          printf '%s\n' "LIVE_DATABASE_URL=${LIVE_DATABASE_URL}"  >> .env
          printf '%s\n' "NODE_ENV=production"                     >> .env
          printf '%s\n' "PORT=${PORT}"                            >> .env
          printf '%s\n' "API_PREFIX=${API_PREFIX}"                >> .env
          printf '%s\n' "SECRET_KEY=${SECRET_KEY}"                >> .env
          printf '%s\n' "MAIL_SERVICE=${MAIL_SERVICE}"            >> .env
          printf '%s\n' "MAIL_HOST=${MAIL_HOST}"                  >> .env
          printf '%s\n' "MAIL_USERNAME=${MAIL_USERNAME}"          >> .env
          printf '%s\n' "MAIL_PASSWORD=${MAIL_PASSWORD}"          >> .env
          printf '%s\n' "MAIL_ENCRYPTION=${MAIL_ENCRYPTION}"      >> .env
          printf '%s\n' "MAIL_PORT=${MAIL_PORT}"                  >> .env
          printf '%s\n' "MAIL_FROM_NAME=${MAIL_FROM_NAME}"        >> .env

          # Validate DATABASE_URL written & non-empty (donâ€™t echo the value)
          if ! grep -q '^DATABASE_URL=' .env; then
            echo "ERROR: DATABASE_URL not written to .env"; exit 1
          fi
          LEN="$(awk -F= '/^DATABASE_URL=/{print length($2)}' .env)"
          if [ "${LEN}" -eq 0 ]; then
            echo "ERROR: DATABASE_URL in .env is empty"; exit 1
          fi

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: npm

      - name: Build & Prisma migrate
        shell: bash
        run: |
          set -euo pipefail
          echo "=== Installing dependencies ==="
          npm ci
          echo "=== Running build (if defined) ==="
          npm run build --if-present
          echo "=== Generating Prisma client ==="
          unset DATABASE_URL || true     # ensure Prisma reads .env, not a blank env var
          npx prisma generate
          echo "=== Running Prisma migrations ==="
          npx prisma migrate deploy || npx prisma db push

      - name: Ensure PM2 installed
        shell: bash
        run: |
          command -v pm2 >/dev/null 2>&1 || sudo npm i -g pm2

      - name: Start/Reload app with PM2
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME="ollie-backend"

          if pm2 describe "${APP_NAME}" >/dev/null 2>&1; then
            pm2 reload "${APP_NAME}" --update-env
          else
            pm2 start index.js --name "${APP_NAME}"
          fi

          pm2 delete index || true
          pm2 save

      - name: Show startup logs (from files, reliable)
        shell: bash
        run: |
          echo "=== PM2 process list ==="
          pm2 status
          echo "=== App OUT log (last 120 lines) ==="
          tail -n 120 ~/.pm2/logs/ollie-backend-out.log || true
          echo "=== App ERROR log (last 120 lines) ==="
          tail -n 120 ~/.pm2/logs/ollie-backend-error.log || true

      - name: Health check (fast)
        shell: bash
        run: |
          set -e
          URL="http://127.0.0.1:${PORT:-3000}/health"
          for i in {1..30}; do
            if curl -fsS "$URL" >/dev/null; then
              echo "Health check passed"
              exit 0
            fi
            sleep 2
          done
          echo "Health check failed"
          tail -n 200 ~/.pm2/logs/ollie-backend-out.log || true
          tail -n 200 ~/.pm2/logs/ollie-backend-error.log || true
          exit 1
